{"version":3,"sources":["CurrensyRow.js","App.js","index.js"],"names":["CurrensyRow","props","currencyOptions","selectedCurrency","onChangeCurrency","amount","onChangeAmount","className","type","value","onChange","map","option","key","BASE_URL","App","toAmount","fromAmount","useState","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","setAmount","amountInFromCurrency","setAmountInFromCurrency","useEffect","fetch","then","response","json","data","firstCurrency","Object","keys","rates","base","e","target","Math","round","event","ReactDOM","render","document","getElementById"],"mappings":"6MAkCeA,MAhCf,SAAqBC,GAAQ,IAEzBC,EAKED,EALFC,gBACAC,EAIEF,EAJFE,iBACAC,EAGEH,EAHFG,iBACAC,EAEEJ,EAFFI,OACAC,EACEL,EADFK,eAGF,OAAID,EAEA,oCACE,2BACEE,UAAU,QACVC,KAAK,SACLC,MAAOJ,EACPK,SAAUJ,IAEZ,4BAAQG,MAAON,EAAkBO,SAAUN,GACxCF,EAAgBS,KAAI,SAAAC,GAAM,OACzB,4BAAQC,IAAKD,EAAQH,MAAOG,GACzBA,QAOJ,4CCzBLE,EAAW,yCAoEFC,MAlEf,WAAgB,IAOVC,EAAUC,EAPD,EACiCC,mBAAS,IAD1C,mBACNhB,EADM,KACWiB,EADX,OAE2BD,qBAF3B,mBAENE,EAFM,KAEQC,EAFR,OAGuBH,qBAHvB,mBAGNI,EAHM,KAGMC,EAHN,OAI2BL,qBAJ3B,mBAINM,EAJM,KAIQC,EAJR,OAKeP,mBAAS,GALxB,mBAKNb,EALM,KAKEqB,EALF,OAM2CR,oBAAS,GANpD,mBAMNS,EANM,KAMgBC,EANhB,KA4Cb,OApCID,GACFV,EAAaZ,EACbW,EAAWX,EAASmB,IAEpBR,EAAWX,EACXY,EAAaZ,EAASmB,GAExBK,qBAAU,WACRC,MAAMhB,GACHiB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,IAAMC,EAAgBC,OAAOC,KAAKH,EAAKI,OAAO,GAC9CnB,EAAmB,CAACe,EAAKK,MAAP,mBAAgBH,OAAOC,KAAKH,EAAKI,UACnDjB,EAAgBa,EAAKK,MACrBhB,EAAcY,GACdV,EAAgBS,EAAKI,MAAMH,SAE9B,IAEHN,qBAAU,WACY,MAAhBT,GAAsC,MAAdE,GAC1BQ,MAAM,GAAD,OAAIhB,EAAJ,iBAAqBM,EAArB,oBAA6CE,IAC/CS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIT,EAAgBS,EAAKI,MAAMhB,SAE5C,CAACF,EAAcE,IAYhB,yBAAKf,UAAU,OACb,yCACA,kBAAC,EAAD,CACEJ,iBAAkBiB,EAClBlB,gBAAiBA,EACjBE,iBAAkB,SAAAoC,GAAC,OAAInB,EAAgBmB,EAAEC,OAAOhC,QAChDJ,OAAQqC,KAAKC,MAAmB,IAAb1B,GAAoB,IACvCX,eAjBN,SAAgCsC,GAC9BlB,EAAUkB,EAAMH,OAAOhC,OACvBmB,GAAwB,MAiBtB,yBAAKrB,UAAU,UAAf,KACA,kBAAC,EAAD,CACEJ,iBAAkBmB,EAClBpB,gBAAiBA,EACjBE,iBAAkB,SAAAoC,GAAC,OAAIjB,EAAciB,EAAEC,OAAOhC,QAC9CJ,OAAQqC,KAAKC,MAAiB,IAAX3B,GAAkB,IACrCV,eArBN,SAA8BsC,GAC5BlB,EAAUkB,EAAMH,OAAOhC,OACvBmB,GAAwB,QC3C5BiB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.38571068.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction CurrensyRow(props) {\r\n  const {\r\n    currencyOptions,\r\n    selectedCurrency,\r\n    onChangeCurrency,\r\n    amount,\r\n    onChangeAmount\r\n  } = props;\r\n  //   Initially amount equals to NaN, wait untill it's assigned to number\r\n  if (amount) {\r\n    return (\r\n      <>\r\n        <input\r\n          className=\"input\"\r\n          type=\"number\"\r\n          value={amount}\r\n          onChange={onChangeAmount}\r\n        />\r\n        <select value={selectedCurrency} onChange={onChangeCurrency}>\r\n          {currencyOptions.map(option => (\r\n            <option key={option} value={option}>\r\n              {option}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </>\r\n    );\r\n  } else {\r\n    return <div>Loading...</div>;\r\n  }\r\n}\r\n\r\nexport default CurrensyRow;\r\n","import React, { useEffect, useState } from \"react\";\n\nimport \"./App.scss\";\nimport CurrensyRow from \"./CurrensyRow\";\n\nconst BASE_URL = \"https://api.exchangeratesapi.io/latest\";\n\nfunction App() {\n  const [currencyOptions, setCurrencyOptions] = useState([]);\n  const [fromCurrency, setFromCurrency] = useState();\n  const [toCurrency, setToCurrency] = useState();\n  const [exchangeRate, setExchangeRate] = useState();\n  const [amount, setAmount] = useState(1);\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true);\n  let toAmount, fromAmount;\n  if (amountInFromCurrency) {\n    fromAmount = amount;\n    toAmount = amount * exchangeRate;\n  } else {\n    toAmount = amount;\n    fromAmount = amount / exchangeRate;\n  }\n  useEffect(() => {\n    fetch(BASE_URL)\n      .then(response => response.json())\n      .then(data => {\n        const firstCurrency = Object.keys(data.rates)[0];\n        setCurrencyOptions([data.base, ...Object.keys(data.rates)]);\n        setFromCurrency(data.base);\n        setToCurrency(firstCurrency);\n        setExchangeRate(data.rates[firstCurrency]);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n        .then(response => response.json())\n        .then(data => setExchangeRate(data.rates[toCurrency]));\n    }\n  }, [fromCurrency, toCurrency]);\n\n  function handleFromAmountChange(event) {\n    setAmount(event.target.value);\n    setAmountInFromCurrency(true);\n  }\n  function handleToAmountChange(event) {\n    setAmount(event.target.value);\n    setAmountInFromCurrency(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Converter</h1>\n      <CurrensyRow\n        selectedCurrency={fromCurrency}\n        currencyOptions={currencyOptions}\n        onChangeCurrency={e => setFromCurrency(e.target.value)}\n        amount={Math.round(fromAmount * 100) / 100}\n        onChangeAmount={handleFromAmountChange}\n      />\n      <div className=\"equals\">=</div>\n      <CurrensyRow\n        selectedCurrency={toCurrency}\n        currencyOptions={currencyOptions}\n        onChangeCurrency={e => setToCurrency(e.target.value)}\n        amount={Math.round(toAmount * 100) / 100}\n        onChangeAmount={handleToAmountChange}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}